# Default runner

source "${BASE_PATH}/src/lib/hash"
source "${BASE_PATH}/src/lib/logging"
zmodload zsh/datetime

TAG_SETUP_A="pre-setup"
TAG_SETUP_Z="post-setup"
TAG_BUILD_A="pre-build"
TAG_BUILD_Z="post-build"
TAG_RUN_A="pre-run"
TAG_RUN_Z="post-run"
TAG_CLEANUP_A="pre-cleanup"
TAG_CLEANUP_Z="post-cleanup"

TAG_SRC_FILE="{src_file}" # The source script, but without playbook stanza
TAG_OUT_PATH="{out_path}" # The output path, cached
TAG_OUT_EXECUTABLE="{out_executable}" # The output executable
TAG_ARGS="{args}" # The recipient program arguments

function run_script_default()
{
  local script_file="$1"
  script_file="$(realpath ${script_file})"
  shift
  local script_ext=${script_file:t:e}
  [ -n "${script_ext}" ] && script_ext=".${script_ext}"
  local script_args=("$@")

  local script_cwd="$(pwd)"

  local script_hash="$(file_hash ${script_file})"
  local out_path="${CACHE_PATH}/${script_hash}"
  local src_file="${out_path}/src_file${script_ext}"
  local out_executable="${out_path}/out_executable"

  function extract_script_stanza()
  {
    local tag=$1
    grep "${NAME}:${tag}:" ${script_file} | sed "s/^.*${NAME}:${tag}://g"
  }

  # Extract the script-specific stanzas
  local script_setup_stanza_A="$(extract_script_stanza ${TAG_SETUP_A})"
  local script_setup_stanza_Z="$(extract_script_stanza ${TAG_SETUP_Z})"
  local script_build_stanza_A="$(extract_script_stanza ${TAG_BUILD_A})"
  local script_build_stanza_Z="$(extract_script_stanza ${TAG_BUILD_Z})"
  local script_run_stanza_A="$(extract_script_stanza ${TAG_RUN_A})"
  local script_run_stanza_Z="$(extract_script_stanza ${TAG_RUN_Z})"
  local script_cleanup_stanza_A="$(extract_script_stanza ${TAG_CLEANUP_A})"
  local script_cleanup_stanza_Z="$(extract_script_stanza ${TAG_CLEANUP_Z})"

  # Extract a clean source file (without any playbook stanza)
  # Replace the first line (containing playbook) by an empty line
  # Replace any playbook stanzas by equivalent number of empty lines
  # This allow stable reference of compile/run errors to source code
  mkdir -p "${out_path}"
  sed '1s/.*//g' ${script_file} \
    | sed "s/^.*${NAME}:.*$//g" \
    > ${src_file}
  # Carry over the executable bit (for shell and other scripts)
  [ -x "${script_file}" ] && chmod +x "${src_file}"

  # Override default if the script contains a specific stanza
  function skip_empty_stanzas()
  {
    while read -r line; do
      [[ -n "${line}" ]] && echo "${line}; "
    done
  }

  setup_stanza="$({echo "${script_setup_stanza_A}"; echo "${setup_stanza}"; echo "${script_setup_stanza_Z}"} | skip_empty_stanzas)"
  build_stanza="$({echo "${script_build_stanza_A}"; echo "${build_stanza}"; echo "${script_build_stanza_Z}"} | skip_empty_stanzas)"
  run_stanza="$({echo "${script_run_stanza_A}"; echo "cd ${out_path}"; echo "${run_stanza}"; echo "${script_run_stanza_Z}"} | skip_empty_stanzas)"
  cleanup_stanza="$({echo "${script_cleanup_stanza_A}"; echo "${cleanup_stanza}"; echo "${script_cleanup_stanza_Z}"} | skip_empty_stanzas)"

  function execute_stanza()
  {
    local step_name=$1
    shift
    local commands=$@
    if [[ -n "${commands}" ]]; then
      # Logging, without the duration
      local timestamp_A
      typeset -F timestamp_A=${EPOCHREALTIME}
      echo "${step_name};${timestamp_A};;${script_cwd};${script_file};${script_args}" >> ${out_path}/${LOG_FILE}

      local script_args_quoted=""
      {
        local i=1
        local arg_escaped
        while [ $i -le ${#script_args} ]; do
          script_args_quoted+='"'

          # '&' has special meaning for sed, so make sure it's interpreted as a literal '&'
          arg_escaped="${script_args[$i]}"
          arg_escaped="${arg_escaped:gs/&/\\&}"

          script_args_quoted+="${arg_escaped}"
          script_args_quoted+='" '

          i=$((i+1))
        done
      }
      local exit_code=0
      echo "${commands}" | while read command; do
        local real_command=$(echo "${command}" \
          | sed "s|{src_file}|${src_file}|g" \
          | sed "s|{out_path}|${out_path}|g" \
          | sed "s|{out_executable}|${out_executable}|g" \
          | sed "s|{args}|${script_args_quoted}|g" \
        )
        #log_info "${NAME} > ${real_command}"
        eval ${real_command}

        exit_code=$?
        (( exit_code != 0 )) && break
      done

      # Logging
      local timestamp_Z
      typeset -F timestamp_Z=${EPOCHREALTIME}
      echo "${step_name};${timestamp_A};$(( timestamp_Z - timestamp_A ));${script_cwd};${script_file};${script_args}" >> ${out_path}/${LOG_FILE}

      return ${exit_code}
    fi
  }

  function execute_stanza_with_guard()
  {
    local step_name=$1
    shift
    local guard_file=$1
    shift
    if [ ! -r "${guard_file}" -o "${script_file}" -nt "${guard_file}" ]; then
      execute_stanza ${step_name} $@ \
        && touch "${guard_file}"
    fi
  }

  # Create log file if needed
  [ ! -f ${out_path}/${LOG_FILE} ] && {
    echo 'step;start;duration;cwd;cmd_abspathname;args' > ${out_path}/${LOG_FILE}
  }

  # Dont rerun setup and build if the source files hasnt changed
  execute_stanza_with_guard setup "${out_path}/${NAME}_setup-guard" ${setup_stanza} \
    && execute_stanza_with_guard build "${out_path}/${NAME}_build-guard" ${build_stanza} \
    && execute_stanza run ${run_stanza} \
    && execute_stanza cleanup ${cleanup_stanza}
}

